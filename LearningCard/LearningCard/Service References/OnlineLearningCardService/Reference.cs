//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LearningCard.OnlineLearningCardService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="OnlineLearningCardService.ILearningCardService", CallbackContract=typeof(LearningCard.OnlineLearningCardService.ILearningCardServiceCallback))]
    public interface ILearningCardService {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILearningCardService/RegisterClient")]
        void RegisterClient(string clientName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILearningCardService/RegisterClient")]
        System.Threading.Tasks.Task RegisterClientAsync(string clientName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILearningCardService/NotifyServer")]
        void NotifyServer(LearningCardClasses.EventDataType eventData);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILearningCardService/NotifyServer")]
        System.Threading.Tasks.Task NotifyServerAsync(LearningCardClasses.EventDataType eventData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILearningCardService/GetActivePlayers", ReplyAction="http://tempuri.org/ILearningCardService/GetActivePlayersResponse")]
        System.Collections.Generic.List<string> GetActivePlayers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILearningCardService/GetActivePlayers", ReplyAction="http://tempuri.org/ILearningCardService/GetActivePlayersResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<string>> GetActivePlayersAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILearningCardService/StartGame")]
        void StartGame(LearningCardClasses.CardPack cp);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILearningCardService/StartGame")]
        System.Threading.Tasks.Task StartGameAsync(LearningCardClasses.CardPack cp);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILearningCardService/SetVisibleDeckName")]
        void SetVisibleDeckName(string name);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILearningCardService/SetVisibleDeckName")]
        System.Threading.Tasks.Task SetVisibleDeckNameAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILearningCardService/GetVisibleDeckName", ReplyAction="http://tempuri.org/ILearningCardService/GetVisibleDeckNameResponse")]
        string GetVisibleDeckName();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILearningCardService/GetVisibleDeckName", ReplyAction="http://tempuri.org/ILearningCardService/GetVisibleDeckNameResponse")]
        System.Threading.Tasks.Task<string> GetVisibleDeckNameAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILearningCardService/GetServerDeck", ReplyAction="http://tempuri.org/ILearningCardService/GetServerDeckResponse")]
        LearningCardClasses.CardPack GetServerDeck();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILearningCardService/GetServerDeck", ReplyAction="http://tempuri.org/ILearningCardService/GetServerDeckResponse")]
        System.Threading.Tasks.Task<LearningCardClasses.CardPack> GetServerDeckAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILearningCardService/SendAnswer")]
        void SendAnswer(string clientName, bool IsRight);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILearningCardService/SendAnswer")]
        System.Threading.Tasks.Task SendAnswerAsync(string clientName, bool IsRight);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILearningCardService/GetCard", ReplyAction="http://tempuri.org/ILearningCardService/GetCardResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(LearningCardClasses.AnswerTippMixModel))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(LearningCardClasses.AnswerExactTextModel))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(LearningCardClasses.AnswerLotofTextModel))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(LearningCardClasses.QuestionTextModel))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(LearningCardClasses.QuestionPictureModel))]
        LearningCardClasses.Card GetCard();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILearningCardService/GetCard", ReplyAction="http://tempuri.org/ILearningCardService/GetCardResponse")]
        System.Threading.Tasks.Task<LearningCardClasses.Card> GetCardAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILearningCardService/GetScoreBoard", ReplyAction="http://tempuri.org/ILearningCardService/GetScoreBoardResponse")]
        System.Collections.Generic.Dictionary<string, int> GetScoreBoard();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILearningCardService/GetScoreBoard", ReplyAction="http://tempuri.org/ILearningCardService/GetScoreBoardResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, int>> GetScoreBoardAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILearningCardServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILearningCardService/BroadcastToClient")]
        void BroadcastToClient(LearningCardClasses.EventDataType eventData);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILearningCardServiceChannel : LearningCard.OnlineLearningCardService.ILearningCardService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LearningCardServiceClient : System.ServiceModel.DuplexClientBase<LearningCard.OnlineLearningCardService.ILearningCardService>, LearningCard.OnlineLearningCardService.ILearningCardService {
        
        public LearningCardServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public LearningCardServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public LearningCardServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public LearningCardServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public LearningCardServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void RegisterClient(string clientName) {
            base.Channel.RegisterClient(clientName);
        }
        
        public System.Threading.Tasks.Task RegisterClientAsync(string clientName) {
            return base.Channel.RegisterClientAsync(clientName);
        }
        
        public void NotifyServer(LearningCardClasses.EventDataType eventData) {
            base.Channel.NotifyServer(eventData);
        }
        
        public System.Threading.Tasks.Task NotifyServerAsync(LearningCardClasses.EventDataType eventData) {
            return base.Channel.NotifyServerAsync(eventData);
        }
        
        public System.Collections.Generic.List<string> GetActivePlayers() {
            return base.Channel.GetActivePlayers();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<string>> GetActivePlayersAsync() {
            return base.Channel.GetActivePlayersAsync();
        }
        
        public void StartGame(LearningCardClasses.CardPack cp) {
            base.Channel.StartGame(cp);
        }
        
        public System.Threading.Tasks.Task StartGameAsync(LearningCardClasses.CardPack cp) {
            return base.Channel.StartGameAsync(cp);
        }
        
        public void SetVisibleDeckName(string name) {
            base.Channel.SetVisibleDeckName(name);
        }
        
        public System.Threading.Tasks.Task SetVisibleDeckNameAsync(string name) {
            return base.Channel.SetVisibleDeckNameAsync(name);
        }
        
        public string GetVisibleDeckName() {
            return base.Channel.GetVisibleDeckName();
        }
        
        public System.Threading.Tasks.Task<string> GetVisibleDeckNameAsync() {
            return base.Channel.GetVisibleDeckNameAsync();
        }
        
        public LearningCardClasses.CardPack GetServerDeck() {
            return base.Channel.GetServerDeck();
        }
        
        public System.Threading.Tasks.Task<LearningCardClasses.CardPack> GetServerDeckAsync() {
            return base.Channel.GetServerDeckAsync();
        }
        
        public void SendAnswer(string clientName, bool IsRight) {
            base.Channel.SendAnswer(clientName, IsRight);
        }
        
        public System.Threading.Tasks.Task SendAnswerAsync(string clientName, bool IsRight) {
            return base.Channel.SendAnswerAsync(clientName, IsRight);
        }
        
        public LearningCardClasses.Card GetCard() {
            return base.Channel.GetCard();
        }
        
        public System.Threading.Tasks.Task<LearningCardClasses.Card> GetCardAsync() {
            return base.Channel.GetCardAsync();
        }
        
        public System.Collections.Generic.Dictionary<string, int> GetScoreBoard() {
            return base.Channel.GetScoreBoard();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, int>> GetScoreBoardAsync() {
            return base.Channel.GetScoreBoardAsync();
        }
    }
}
